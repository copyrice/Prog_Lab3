/*Класс КОНДИЦИОНЕР + классы БЫТОВОЕ УСТРОЙСТВО, ОБОГРЕВАТЕЛЬ.
Реализовать схему наследования классов и корректно распределить по классам данные: 
фирма, модель, вес, температура, режим, год выпуска, мощность.
Интерфейс возможности управления / регулировки устройства IControllable с 
методом void control(int temperature) – отрегулировать устройство в зависимости 
от установленной в параметре температуры. Реализация метода в классе кондиционера:
если температура задана меньше 10 градусов, то выдать сообщение и выключиться, 
иначе присвоить текущему режиму разный номер в зависимости от температуры (т.е. 
выставить режим). Реализация метода в классе обогревателя: если задана температура 
выше 45 градусов, то выдать сообщение и выключиться, иначе присвоить текущему 
режиму разный номер в зависимости от температуры. В main() создать 2 кондиционера
и 1 обогреватель, продемонстрировать полиморфизм control()*/

#include <iostream>
#include <string>
#include "Conditioner.h"
#include "Heater.h"
using namespace std;

int main()
{

    Conditioner* cond1 = new Conditioner("LG", "D122", 12, 2021, 700, 28, "Heating");
    Conditioner* cond2 = new Conditioner("Mitsubishi", "S177", 15, 2020, 800, 17, "Cooling");
    Heater heater("Samsung", "C124", 10, 2020, 700, 27);


    cond1->control(10); // устройства не работают, поэтому ничего не происходит
    cond2->control(50);
    heater.control(61);
    cout << endl;

    cond1->turn_on(); //включаем
    cond2->turn_on();
    heater.turn_on();

    cout << endl;
    cond1->control(10); // температура слишком низкая или слишком высокая, выключение
    cond2->control(50);
    heater.control(61);

    cond1->turn_on(); // включаем повторно
    cond2->turn_on();
    heater.turn_on();

    cond1->control(20); //меняем температуру
    cond2->control(27);
    heater.control(31);

    cond1->DeviceInfo(); // демонстрация полиморфизма - вывод разных данных одной командой
    cond2->DeviceInfo();
    heater.DeviceInfo();

}

